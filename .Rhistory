to = nrow(raw_120_365))]
R_hat_sparcc = matrix(NA,
nrow = nrow(raw_30) + nrow(raw_120) + nrow(raw_365),
ncol = nrow(raw_30) + nrow(raw_120) + nrow(raw_365))
R_hat_sparcc[seq_len(nrow(raw_30)), seq_len(nrow(raw_30))] = R_hat_sparcc11
R_hat_sparcc[seq_len(nrow(raw_30)),
seq(from = nrow(raw_30) + 1,
to = nrow(raw_30) + nrow(raw_120))] = R_hat_sparcc12
R_hat_sparcc[seq_len(nrow(raw_30)),
seq(from = nrow(raw_30) + nrow(raw_120) + 1,
to = nrow(raw_30) + nrow(raw_120) + nrow(raw_365))] = R_hat_sparcc13
R_hat_sparcc[seq(from = nrow(raw_30) + 1,
to = nrow(raw_30) + nrow(raw_120)),
seq(from = nrow(raw_30) + 1,
to = nrow(raw_30) + nrow(raw_120))] = R_hat_sparcc22
R_hat_sparcc[seq(from = nrow(raw_30) + 1,
to = nrow(raw_30) + nrow(raw_120)),
seq(from = nrow(raw_30) + nrow(raw_120) + 1,
to = nrow(raw_30) + nrow(raw_120) + nrow(raw_365))] = R_hat_sparcc23
R_hat_sparcc[seq(from = nrow(raw_30) + nrow(raw_120) + 1,
to = nrow(raw_30) + nrow(raw_120) + nrow(raw_365)),
seq(from = nrow(raw_30) + nrow(raw_120) + 1,
to = nrow(raw_30) + nrow(raw_120) + nrow(raw_365))] = R_hat_sparcc33
View(R_hat_sparcc)
R_hat_sparcc[lower.tri(R_hat_sparcc)]
R_hat_sparcc[lower.tri(R_hat_sparcc)] = R_hat_sparcc[upper.tri(R_hat_sparcc)]
R_hat_sparcc = hard_thresh(R_hat_sparcc, 0.3)
col_ind = match(family_level, colnames(R_hat_sparcc))
R_hat_sparcc = R_hat_sparcc[col_ind[!is.na(col_ind)], col_ind[!is.na(col_ind)]]
df_sparcc = data.frame(get_upper_tri(R_hat_sparcc)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
mutate(var2 = gsub("\\...", " - ", var2)) %>%
filter(!is.na(value)) %>%
mutate(value = round(value, 2))
family_level
R_hat_sparcc = matrix(NA,
nrow = nrow(raw_30) + nrow(raw_120) + nrow(raw_365),
ncol = nrow(raw_30) + nrow(raw_120) + nrow(raw_365))
R_hat_sparcc[seq_len(nrow(raw_30)), seq_len(nrow(raw_30))] = R_hat_sparcc11
R_hat_sparcc[seq_len(nrow(raw_30)),
seq(from = nrow(raw_30) + 1,
to = nrow(raw_30) + nrow(raw_120))] = R_hat_sparcc12
R_hat_sparcc[seq_len(nrow(raw_30)),
seq(from = nrow(raw_30) + nrow(raw_120) + 1,
to = nrow(raw_30) + nrow(raw_120) + nrow(raw_365))] = R_hat_sparcc13
R_hat_sparcc[seq(from = nrow(raw_30) + 1,
to = nrow(raw_30) + nrow(raw_120)),
seq(from = nrow(raw_30) + 1,
to = nrow(raw_30) + nrow(raw_120))] = R_hat_sparcc22
R_hat_sparcc[seq(from = nrow(raw_30) + 1,
to = nrow(raw_30) + nrow(raw_120)),
seq(from = nrow(raw_30) + nrow(raw_120) + 1,
to = nrow(raw_30) + nrow(raw_120) + nrow(raw_365))] = R_hat_sparcc23
R_hat_sparcc[seq(from = nrow(raw_30) + nrow(raw_120) + 1,
to = nrow(raw_30) + nrow(raw_120) + nrow(raw_365)),
seq(from = nrow(raw_30) + nrow(raw_120) + 1,
to = nrow(raw_30) + nrow(raw_120) + nrow(raw_365))] = R_hat_sparcc33
R_hat_sparcc[lower.tri(R_hat_sparcc)] = R_hat_sparcc[upper.tri(R_hat_sparcc)]
dimnames(R_hat_sparcc) = list(c(rownames(raw_30), rownames(raw_120), rownames(raw_365)),
c(rownames(raw_30), rownames(raw_120), rownames(raw_365)))
View(R_hat_sparcc)
R_hat_sparcc = hard_thresh(R_hat_sparcc, 0.3)
col_ind = match(family_level, colnames(R_hat_sparcc))
R_hat_sparcc = R_hat_sparcc[col_ind[!is.na(col_ind)], col_ind[!is.na(col_ind)]]
df_sparcc = data.frame(get_upper_tri(R_hat_sparcc)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
mutate(var2 = gsub("\\...", " - ", var2)) %>%
filter(!is.na(value)) %>%
mutate(value = round(value, 2))
family_level = sort(union(df_sparcc$var1, df_sparcc$var2))
family_label = sapply(family_level, function(x) strsplit(x, " - ")[[1]][2])
txt_color = case_when(grepl("data1", family_level) ~ "#1B9E77",
grepl("data2", family_level) ~ "#D95F02",
TRUE ~ "#7570B3")
df_sparcc$var1 = factor(df_sparcc$var1, levels = family_level)
df_sparcc$var2 = factor(df_sparcc$var2, levels = family_level)
p_sparcc = df_sparcc %>%
ggplot(aes(var2, var1, fill = value)) +
geom_tile(color = "black") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", na.value = "grey",
midpoint = 0, limit = c(-1,1), space = "Lab",
name = NULL) +
scale_x_discrete(drop = FALSE, labels = family_label) +
scale_y_discrete(drop = FALSE, labels = family_label) +
geom_text(aes(var2, var1, label = value), color = "black", size = 4) +
labs(x = NULL, y = NULL, title = NULL) +
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "right")) +
theme_bw() +
geom_vline(xintercept = c(8.5, 15.5), color = "blue", linetype = "dashed") +
geom_hline(yintercept = c(8.5, 15.5), color = "blue", linetype = "dashed") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1,
face = "italic", color = txt_color),
axis.text.y = element_text(size = 12, face = "italic", color = txt_color),
strip.text.x = element_text(size = 14),
strip.text.y = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 15),
panel.grid.major = element_blank(),
axis.ticks = element_blank()) +
coord_fixed()
p_sparcc
p_sparcc
res_linear = read_rds("../data/nomic/phylum/res_linear.rds")
res_dist = read_rds("../data/nomic/phylum/res_dist.rds")
p_filter = function(mat, mat_p, max_p){
ind_p = mat_p
ind_p[mat_p > max_p] = 0
ind_p[mat_p <= max_p] = 1
mat_filter = mat * ind_p
return(mat_filter)
}
res_linear$corr_fl = p_filter(res_linear$corr, res_linear$corr_p, 0.1)
res_dist$dcorr_fl = p_filter(res_linear$dcorr, res_linear$dcorr_p, 0.1)
cooccur_linear = res_linear$mat_cooccur
# Filter by co-occurrence
overlap = 10
corr_linear[cooccur_linear < overlap] = 0
df_linear = data.frame(get_upper_tri(corr_linear)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
filter(!is.na(value)) %>%
mutate(var2 = gsub("\\...", " - ", var2),
value = round(value, 2),
metric = "Pearson")
# Distance relationships
corr_dist = res_dist$dcorr_fl
cooccur_dist = res_dist$mat_cooccur
# Filter by co-occurrence
overlap = 10
corr_dist[cooccur_dist < overlap] = 0
df_dist = data.frame(get_upper_tri(corr_dist)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
filter(!is.na(value)) %>%
mutate(var2 = gsub("\\...", " - ", var2),
value = round(value, 2),
metric = "Distance")
View(res_linear$corr_fl)
pseqs = readRDS("../data/nomic/physeq_obj.rds")
pseqs = readRDS("data/nomic/physeq_obj.rds")
# OTU object
otu_table = abundances(pseqs$day30)
tax = tax_table(pseqs$day30)@.Data
meta_data = meta(pseqs$day30)
col_30 = colnames(otu_table)
new_30 = meta_data$kortnr[which(col_30 %in% meta_data$X.SampleID)]
colnames(otu_table) = new_30
col_30
new_30
OTU = otu_table(otu_table, taxa_are_rows = TRUE)
META = sample_data(meta_data)
sample_names(META) = meta_data$kortnr
TAX = tax_table(tax)
otu_data30 = phyloseq(OTU, TAX, META)
# Aggregate to phylum level
phylum_data30 = aggregate_taxa(otu_data30, "phylum")
phylum_data30 = subset_taxa(phylum_data30, phylum != "Unknown")
# Aggregate to family level
family_data30 = aggregate_taxa(otu_data30, "family")
family_data30 = subset_taxa(family_data30, family != "Unknown")
top_phylum = c("Acidobacteria", "Actinobacteria", "Bacteroidetes", "Cyanobacteria", "Firmicutes",
"Fusobacteria", "Proteobacteria", "Tenericutes", "TM7", "Verrucomicrobia")
top_family = c("Bacteroidaceae", "Bifidobacteriaceae", "Clostridiaceae", "Enterobacteriaceae", "Fusobacteriaceae",
"Lachnospiraceae", "Moraxellaceae", "Pasteurellaceae", "Ruminococcaceae", "Staphylococcaceae")
otu_table = abundances(pseqs$day30)
meta_data = meta(pseqs$day30)
tax = tax_table(pseqs$day30)@.Data
col_30 = colnames(otu_table)
new_30 = meta_data$kortnr[which(col_30 %in% meta_data$X.SampleID)]
colnames(otu_table) = new_30
OTU = otu_table(otu_table, taxa_are_rows = TRUE)
META = sample_data(meta_data)
sample_names(META) = meta_data$kortnr
TAX = tax_table(tax)
otu_data30 = phyloseq(OTU, TAX, META)
# Aggregate to phylum level
phylum_data30 = aggregate_taxa(otu_data30, "phylum")
phylum_data30 = subset_taxa(phylum_data30, phylum != "Unknown")
core_phylum30 = subset_taxa(phylum_data30, phylum %in% top_phylum)
# Aggregate to family level
family_data30 = aggregate_taxa(otu_data30, "family")
family_data30 = subset_taxa(family_data30, family != "Unknown")
core_family30 = subset_taxa(family_data30, family %in% top_family)
otu_table = abundances(pseqs$day365)
meta_data = meta(pseqs$day365)
tax = tax_table(pseqs$day365)@.Data
col_365 = colnames(otu_table)
new_365 = meta_data$kortnr[which(col_365 %in% meta_data$X.SampleID)]
colnames(otu_table) = new_365
OTU = otu_table(otu_table, taxa_are_rows = TRUE)
META = sample_data(meta_data)
sample_names(META) = meta_data$kortnr
TAX = tax_table(tax)
otu_data365 = phyloseq(OTU, TAX, META)
# Aggregate to phylum level
phylum_data365 = aggregate_taxa(otu_data365, "phylum")
phylum_data365 = subset_taxa(phylum_data365, phylum != "Unknown")
core_phylum365 = subset_taxa(phylum_data365, phylum %in% top_phylum)
# Aggregate to family level
family_data365 = aggregate_taxa(otu_data365, "family")
family_data365 = subset_taxa(family_data365, family != "Unknown")
core_family365 = subset_taxa(family_data365, family %in% top_family)
otu_table = abundances(pseqs$day120)
meta_data = meta(pseqs$day120)
tax = tax_table(pseqs$day120)@.Data
col_120 = colnames(otu_table)
new_120 = meta_data$kortnr[which(col_120 %in% meta_data$X.SampleID)]
colnames(otu_table) = new_120
OTU = otu_table(otu_table, taxa_are_rows = TRUE)
META = sample_data(meta_data)
sample_names(META) = meta_data$kortnr
TAX = tax_table(tax)
otu_data120 = phyloseq(OTU, TAX, META)
# Aggregate to phylum level
phylum_data120 = aggregate_taxa(otu_data120, "phylum")
phylum_data120 = subset_taxa(phylum_data120, phylum != "Unknown")
core_phylum120 = subset_taxa(phylum_data120, phylum %in% top_phylum)
# Aggregate to family level
family_data120 = aggregate_taxa(otu_data120, "family")
family_data120 = subset_taxa(family_data120, family != "Unknown")
core_family120 = subset_taxa(family_data120, family %in% top_family)
pseqs = list(data1 = c(otu_data30, core_phylum30),
data2 = c(otu_data120, core_phylum120),
data3 = c(otu_data365, core_phylum365))
pseudo = 0; prv_cut = 0.1; lib_cut = 0; corr_cut = 0.5
wins_quant = c(0.05, 0.95); method = "pearson"; soft = FALSE; thresh_len = 20
n_cv = 10; thresh_hard = 0; max_p_linear = 0.1; n_cl = 2
set.seed(123)
res_linear = secom_linear(pseqs, pseudo, prv_cut, lib_cut, corr_cut,
wins_quant, method, soft, thresh_len, n_cv,
thresh_hard, max_p_linear, n_cl)
R = 1000; max_p_dist = 0.1
set.seed(123)
res_dist = secom_dist(pseqs, pseudo, prv_cut, corr_cut, lib_cut,
wins_quant, R, thresh_hard, max_p_dist, n_cl)
# Data organization
# Linear relationships
corr_linear = res_linear$corr_fl
cooccur_linear = res_linear$mat_cooccur
# Filter by co-occurrence
overlap = 10
corr_linear[cooccur_linear < overlap] = 0
df_linear = data.frame(get_upper_tri(corr_linear)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
filter(!is.na(value)) %>%
mutate(var2 = gsub("\\...", " - ", var2),
value = round(value, 2),
metric = "Pearson")
# Distance relationships
corr_dist = res_dist$dcorr_fl
cooccur_dist = res_dist$mat_cooccur
# Filter by co-occurrence
overlap = 10
corr_dist[cooccur_dist < overlap] = 0
df_dist = data.frame(get_upper_tri(corr_dist)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
filter(!is.na(value)) %>%
mutate(var2 = gsub("\\...", " - ", var2),
value = round(value, 2),
metric = "Distance")
# Merge datasets
df_corr = df_linear %>%
bind_rows(
df_dist
)
phylum_level = sort(union(df_corr$var1, df_corr$var2))
phylum_label = sapply(phylum_level, function(x) strsplit(x, " - ")[[1]][2])
txt_color = case_when(grepl("data1", phylum_level) ~ "#1B9E77",
grepl("data2", phylum_level) ~ "#D95F02",
TRUE ~ "#7570B3")
df_corr$var1 = factor(df_corr$var1, levels = phylum_level)
df_corr$var2 = factor(df_corr$var2, levels = phylum_level)
df_corr$metric = factor(df_corr$metric, levels = c("Pearson", "Distance"))
p_corr = df_corr %>%
ggplot(aes(var2, var1, fill = value)) +
geom_tile(color = "black") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", na.value = "grey",
midpoint = 0, limit = c(-1,1), space = "Lab",
name = NULL) +
scale_x_discrete(drop = FALSE, labels = phylum_label) +
scale_y_discrete(drop = FALSE, labels = phylum_label) +
facet_grid(rows = vars(metric)) +
geom_text(aes(var2, var1, label = value), color = "black", size = 4) +
labs(x = NULL, y = NULL, title = NULL) +
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "right")) +
theme_bw() +
geom_vline(xintercept = c(4.5, 9.5), color = "blue", linetype = "dashed") +
geom_hline(yintercept = c(4.5, 9.5), color = "blue", linetype = "dashed") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1,
face = "italic", color = txt_color),
axis.text.y = element_text(size = 12, face = "italic", color = txt_color),
strip.text.x = element_text(size = 14),
strip.text.y = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 15),
panel.grid.major = element_blank(),
axis.ticks = element_blank()) +
coord_fixed()
p_corr
p_corr
saveRDS(res_linear, file = "../data/nomic/phylum/res_linear.rds")
saveRDS(res_dist, file = "../data/nomic/phylum/res_dist.rds")
pseqs = list(data1 = c(otu_data30, core_family30),
data2 = c(otu_data120, core_family120),
data3 = c(otu_data365, core_family365))
pseudo = 0; prv_cut = 0.1; lib_cut = 0; corr_cut = 0.5
wins_quant = c(0.05, 0.95); method = "pearson"; soft = FALSE; thresh_len = 20
n_cv = 10; thresh_hard = 0; max_p_linear = 0.1; n_cl = 2
set.seed(123)
res_linear = secom_linear(pseqs, pseudo, prv_cut, lib_cut, corr_cut,
wins_quant, method, soft, thresh_len, n_cv,
thresh_hard, max_p_linear, n_cl)
R = 1000; max_p_dist = 0.1
set.seed(123)
res_dist = secom_dist(pseqs, pseudo, prv_cut, corr_cut, lib_cut,
wins_quant, R, thresh_hard, max_p_dist, n_cl)
# Data organization
# Linear relationships
corr_linear = res_linear$corr_fl
cooccur_linear = res_linear$mat_cooccur
# Filter by co-occurrence
overlap = 10
corr_linear[cooccur_linear < overlap] = 0
df_linear = data.frame(get_upper_tri(corr_linear)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
filter(!is.na(value)) %>%
mutate(var2 = gsub("\\...", " - ", var2),
value = round(value, 2),
metric = "Pearson")
# Distance relationships
corr_dist = res_dist$dcorr_fl
cooccur_dist = res_dist$mat_cooccur
# Filter by co-occurrence
overlap = 10
corr_dist[cooccur_dist < overlap] = 0
df_dist = data.frame(get_upper_tri(corr_dist)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
filter(!is.na(value)) %>%
mutate(var2 = gsub("\\...", " - ", var2),
value = round(value, 2),
metric = "Distance")
# Merge datasets
df_corr = df_linear %>%
bind_rows(
df_dist
)
family_level = sort(union(df_corr$var1, df_corr$var2))
family_label = sapply(family_level, function(x) strsplit(x, " - ")[[1]][2])
txt_color = case_when(grepl("data1", family_level) ~ "#1B9E77",
grepl("data2", family_level) ~ "#D95F02",
TRUE ~ "#7570B3")
df_corr$var1 = factor(df_corr$var1, levels = family_level)
df_corr$var2 = factor(df_corr$var2, levels = family_level)
df_corr$metric = factor(df_corr$metric, levels = c("Pearson", "Distance"))
p_corr = df_corr %>%
ggplot(aes(var2, var1, fill = value)) +
geom_tile(color = "black") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", na.value = "grey",
midpoint = 0, limit = c(-1,1), space = "Lab",
name = NULL) +
scale_x_discrete(drop = FALSE, labels = family_label) +
scale_y_discrete(drop = FALSE, labels = family_label) +
facet_grid(rows = vars(metric)) +
geom_text(aes(var2, var1, label = value), color = "black", size = 4) +
labs(x = NULL, y = NULL, title = NULL) +
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "right")) +
theme_bw() +
geom_vline(xintercept = c(8.5, 15.5), color = "blue", linetype = "dashed") +
geom_hline(yintercept = c(8.5, 15.5), color = "blue", linetype = "dashed") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1,
face = "italic", color = txt_color),
axis.text.y = element_text(size = 12, face = "italic", color = txt_color),
strip.text.x = element_text(size = 14),
strip.text.y = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 15),
panel.grid.major = element_blank(),
axis.ticks = element_blank()) +
coord_fixed()
p_corr
p_corr
saveRDS(res_linear, file = "../data/nomic/family/res_linear.rds")
saveRDS(res_dist, file = "../data/nomic/family/res_dist.rds")
raw_30 = abundances(family_data30)
meta_30 = meta(family_data30)
col_30 = colnames(raw_30)
new_30 = meta_30$kortnr[which(col_30 %in% meta_30$X.SampleID)]
colnames(raw_30) = new_30
rownames(raw_30) = paste0("data1 - ", rownames(raw_30))
raw_120 = abundances(family_data120)
meta_120 = meta(family_data120)
col_120 = colnames(raw_120)
new_120 = meta_120$kortnr[which(col_120 %in% meta_120$X.SampleID)]
colnames(raw_120) = new_120
rownames(raw_120) = paste0("data2 - ", rownames(raw_120))
raw_365 = abundances(family_data365)
meta_365 = meta(family_data365)
col_365 = colnames(raw_365)
new_365 = meta_365$kortnr[which(col_365 %in% meta_365$X.SampleID)]
colnames(raw_365) = new_365
rownames(raw_365) = paste0("data3 - ", rownames(raw_365))
raw_30_120 = data.frame(raw_30, check.names = FALSE) %>%
bind_rows(data.frame(raw_120, check.names = FALSE)) %>%
select_if(~ !any(is.na(.)))
raw_30_365 = data.frame(raw_30, check.names = FALSE) %>%
bind_rows(data.frame(raw_365, check.names = FALSE)) %>%
select_if(~ !any(is.na(.)))
raw_120_365 = data.frame(raw_120, check.names = FALSE) %>%
bind_rows(data.frame(raw_365, check.names = FALSE)) %>%
select_if(~ !any(is.na(.)))
# SparCC cannot handle missing values, so we have to calculate the correlation
# matrix separately
set.seed(123)
R_hat_sparcc11 = sparcc(t(raw_30))$Cor
R_hat_sparcc22 = sparcc(t(raw_120))$Cor
R_hat_sparcc33 = sparcc(t(raw_365))$Cor
R_hat_sparcc12 = sparcc(t(raw_30_120))$Cor
R_hat_sparcc12 = R_hat_sparcc12[seq_len(nrow(raw_30)),
seq(from = nrow(raw_30) + 1,
to = nrow(raw_30_120))]
R_hat_sparcc13 = sparcc(t(raw_30_365))$Cor
R_hat_sparcc13 = R_hat_sparcc13[seq_len(nrow(raw_30)),
seq(from = nrow(raw_30) + 1,
to = nrow(raw_30_365))]
R_hat_sparcc23 = sparcc(t(raw_120_365))$Cor
R_hat_sparcc23 = R_hat_sparcc23[seq_len(nrow(raw_120)),
seq(from = nrow(raw_120) + 1,
to = nrow(raw_120_365))]
R_hat_sparcc = matrix(NA,
nrow = nrow(raw_30) + nrow(raw_120) + nrow(raw_365),
ncol = nrow(raw_30) + nrow(raw_120) + nrow(raw_365))
R_hat_sparcc[seq_len(nrow(raw_30)), seq_len(nrow(raw_30))] = R_hat_sparcc11
R_hat_sparcc[seq_len(nrow(raw_30)),
seq(from = nrow(raw_30) + 1,
to = nrow(raw_30) + nrow(raw_120))] = R_hat_sparcc12
R_hat_sparcc[seq_len(nrow(raw_30)),
seq(from = nrow(raw_30) + nrow(raw_120) + 1,
to = nrow(raw_30) + nrow(raw_120) + nrow(raw_365))] = R_hat_sparcc13
R_hat_sparcc[seq(from = nrow(raw_30) + 1,
to = nrow(raw_30) + nrow(raw_120)),
seq(from = nrow(raw_30) + 1,
to = nrow(raw_30) + nrow(raw_120))] = R_hat_sparcc22
R_hat_sparcc[seq(from = nrow(raw_30) + 1,
to = nrow(raw_30) + nrow(raw_120)),
seq(from = nrow(raw_30) + nrow(raw_120) + 1,
to = nrow(raw_30) + nrow(raw_120) + nrow(raw_365))] = R_hat_sparcc23
R_hat_sparcc[seq(from = nrow(raw_30) + nrow(raw_120) + 1,
to = nrow(raw_30) + nrow(raw_120) + nrow(raw_365)),
seq(from = nrow(raw_30) + nrow(raw_120) + 1,
to = nrow(raw_30) + nrow(raw_120) + nrow(raw_365))] = R_hat_sparcc33
R_hat_sparcc[lower.tri(R_hat_sparcc)] = R_hat_sparcc[upper.tri(R_hat_sparcc)]
dimnames(R_hat_sparcc) = list(c(rownames(raw_30), rownames(raw_120), rownames(raw_365)),
c(rownames(raw_30), rownames(raw_120), rownames(raw_365)))
saveRDS(R_hat_sparcc, file = "../data/nomic/sparcc/R_hat_sparcc.rds")
R_hat_sparcc = read_rds("../data/nomic/sparcc/R_hat_sparcc.rds")
R_hat_sparcc = hard_thresh(R_hat_sparcc, 0.3)
col_ind = match(family_level, colnames(R_hat_sparcc))
R_hat_sparcc = R_hat_sparcc[col_ind[!is.na(col_ind)], col_ind[!is.na(col_ind)]]
df_sparcc = data.frame(get_upper_tri(R_hat_sparcc)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
mutate(var2 = gsub("\\...", " - ", var2)) %>%
filter(!is.na(value)) %>%
mutate(value = round(value, 2))
family_level = sort(union(df_sparcc$var1, df_sparcc$var2))
family_label = sapply(family_level, function(x) strsplit(x, " - ")[[1]][2])
txt_color = case_when(grepl("data1", family_level) ~ "#1B9E77",
grepl("data2", family_level) ~ "#D95F02",
TRUE ~ "#7570B3")
df_sparcc$var1 = factor(df_sparcc$var1, levels = family_level)
df_sparcc$var2 = factor(df_sparcc$var2, levels = family_level)
p_sparcc = df_sparcc %>%
ggplot(aes(var2, var1, fill = value)) +
geom_tile(color = "black") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", na.value = "grey",
midpoint = 0, limit = c(-1,1), space = "Lab",
name = NULL) +
scale_x_discrete(drop = FALSE, labels = family_label) +
scale_y_discrete(drop = FALSE, labels = family_label) +
geom_text(aes(var2, var1, label = value), color = "black", size = 4) +
labs(x = NULL, y = NULL, title = NULL) +
guides(fill = guide_colorbar(barwidth = 1, barheight = 7,
title.position = "right")) +
theme_bw() +
geom_vline(xintercept = c(8.5, 15.5), color = "blue", linetype = "dashed") +
geom_hline(yintercept = c(8.5, 15.5), color = "blue", linetype = "dashed") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1,
face = "italic", color = txt_color),
axis.text.y = element_text(size = 12, face = "italic", color = txt_color),
strip.text.x = element_text(size = 14),
strip.text.y = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 15),
panel.grid.major = element_blank(),
axis.ticks = element_blank()) +
coord_fixed()
p_sparcc
p_sparcc
library(ANCOMBC)
detach("package:ANCOMBC", unload = TRUE)
BiocManager::install("ANCOMBC")
library(ANCOMBC)
?secom_dist
