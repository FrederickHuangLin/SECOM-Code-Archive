mutate(method = "SECOM (Pearson1)",
setting = rep(simpattern$setting, each = iter_num))
complex_secom2 = complex_secom2 %>%
mutate(method = "SECOM (Pearson2)",
setting = rep(simpattern$setting, each = iter_num))
complex_secom3 = complex_secom3 %>%
mutate(method = "SECOM (Distance)",
setting = rep(simpattern$setting, each = iter_num))
complex_prop = complex_prop %>%
mutate(method = "Proportionality",
setting = rep(simpattern$setting, each = iter_num))
complex_sparcc = complex_sparcc %>%
mutate(method = "SparCC",
setting = rep(simpattern$setting, each = iter_num))
complex_se1 = complex_se1 %>%
mutate(method = "SPIEC-EASI (MB)",
setting = rep(simpattern$setting, each = iter_num))
complex_se2 = complex_se2 %>%
mutate(method = "SPIEC-EASI (GL)",
setting = rep(simpattern$setting, each = iter_num))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE,
message = FALSE, comment = NA,
fig.width = 6.25, fig.height = 5)
library(tidyverse)
library(microbiome)
library(GGally)
library(plotly)
library(SpiecEasi)
library(ggpubr)
library(ggsci)
source("../programs/00_secom.R")
cor2cov = function(R, std) {
Sigma = outer(std, std) * R
return(Sigma)
}
get_upper_tri = function(cormat){
cormat[lower.tri(cormat)] = NA
diag(cormat) = NA
return(cormat)
}
p_dens = function(p_mat) {
p_vec = p_mat[upper.tri(p_mat)]
df_line = data.frame(xintercept = c(0.01, 0.05),
Lines = c("p = 0.01", "p = 0.05"),
stringsAsFactors = FALSE)
fig_p = data.frame(p = p_vec) %>%
ggplot(aes(x = p)) +
stat_ecdf(geom = "point") +
geom_vline(aes(xintercept = xintercept, color = Lines), df_line,
linetype = "dashed", size = 1) +
labs(x = "P-value", y = "Cumulative density") +
scale_color_discrete(name = NULL) +
theme_bw()
return(fig_p)
}
p_filter = function(mat, mat_p, max_p){
ind_p = mat_p
ind_p[mat_p > max_p] = 0
ind_p[mat_p <= max_p] = 1
mat_filter = mat * ind_p
return(mat_filter)
}
hard_thresh = function(R, th){
R_th = R
R_th[abs(R) <= th] = 0
return(R_th)
}
set.seed(123)
n = 50
d = 100
mu = c(rep(NA, 4), # Taxa with correlations
10000, 10000, # High abundant taxa
sample(c(200, 50), d - 6, replace = TRUE, prob = c(0.8, 0.2))) # Low abundant taxa
# NB distribution
dispersion = 0.5
# Absolute abundances
A = matrix(NA, ncol = n, nrow = d)
for (i in seq.int(from = 5, to = d)) {
A[i, ] = rnbinom(n = n, size = 1/dispersion, mu = mu[i])
}
# Dependent pairs of taxa
abn_mean = c(2000, 2000)
template_var = log((abn_mean + dispersion * abn_mean^2)/abn_mean^2 + 1)
template_mean = log(abn_mean) - template_var/2
Sigma = cor2cov(R = diag(1, nrow = 2), std = sqrt(template_var))
template = t(MASS::mvrnorm(n = n, mu = template_mean, Sigma = Sigma))
template1 = template[1, ]
template2 = template[2, ]
poly1 = template_mean[1] * poly(x = template1, degree = 1, raw = FALSE)[, 1] + template_mean[1]
poly2 = template_mean[2] * poly(x = template2, degree = 2, raw = FALSE)[, 2] + template_mean[2]
A_dep = round(exp(rbind(template, poly1, poly2)))
for (i in 1:4) {
A[i, ] = A_dep[i, ]
}
mu[1:2] = 2000
mu[3:4] = 10000
taxa_id = paste0("T", seq_len(d))
sample_id = paste0("S", seq_len(n))
rownames(A) = taxa_id
colnames(A) = sample_id
p_a = data.frame(t(log(A[1:5, ]))) %>%
ggpairs(title = "Synthetic Log Absolute Abundances",
progress = FALSE,
upper = NULL, diag = NULL) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
strip.background = element_rect(fill = "white"))
print(p_a)
# Sequencing efficiency
C = rbeta(n = d, shape1 = 5, shape2 = 5)
# Microbial loads in the ecosystem
A_prim = A * C
A_dot = colSums(A_prim)
# Relative abundances in the ecosystem
R = A_prim/t(replicate(d, A_dot))
# Sampling fractions
S = rbeta(n = n, shape1 = 2, shape2 = 10)
# Library sizes
O_dot = round(S * A_dot)
# Observed abundances
O = matrix(NA, nrow = d, ncol = n)
for (i in seq(n)) {
O[, i] = rmultinom(1, size = O_dot[i], prob = R[, i])
}
rownames(O) = taxa_id
colnames(O) = sample_id
# Random errors
E = O/(A * C * t(replicate(d, S)))
# Log scale parameters
a = log(A)
c = log(C)
s = log(S)
e = log(E)
# Log scale variables
o = log(O)
r = O/t(replicate(d, O_dot))
p_o = data.frame(t(log(O[1:5, ]))) %>%
ggpairs(title = "Synthetic Log Observed Abundances",
progress = FALSE, upper = NULL, diag = NULL) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
strip.background = element_rect(fill = "white"))
print(p_o)
OTU = otu_table(O, taxa_are_rows = TRUE)
meta_data = data.frame(sample_id = sample_id)
META = sample_data(meta_data)
sample_names(META) = meta_data$sample_id
otu_data = phyloseq(OTU, META)
pseqs = list(c(otu_data, otu_data))
pseudo = 0; zero_cut = 0.5; corr_cut = 0.5; lib_cut = 1000
wins_quant = c(0.05, 0.95); method = "pearson"; soft = FALSE; thresh_len = 20
n_cv = 10; seed = 123; thresh_hard = 0.3; max_p = 0.005; n_cl = 5
res_linear = secom_linear(pseqs, pseudo, zero_cut, corr_cut, lib_cut,
wins_quant, method, soft, thresh_len, n_cv,
seed, thresh_hard, max_p, n_cl)
R = 1000; max_p = 0.005
res_dist = secom_dist(pseqs, pseudo, zero_cut, corr_cut, lib_cut,
wins_quant, R, seed, max_p, n_cl)
df = res_dist$dcorr_fl[row_ind, col_ind]
row_ind = which(rownames(res_linear$corr_th) %in% paste0("T", 1:5))
col_ind = which(colnames(res_linear$corr_th) %in% paste0("T", 1:5))
df = res_dist$dcorr_fl[row_ind, col_ind]
df_p = data.frame(get_upper_tri(df)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = T1:T5, names_to = "var2", values_to = "value") %>%
filter(!is.na(value)) %>%
mutate(value = round(value, 2))
df_p$var1 = factor(df_p$var1, levels = paste0("T", 1:5))
df_p$var2 = factor(df_p$var2, levels = paste0("T", 1:5))
p_secom3 = df_p %>%
ggplot(aes(var1, var2, fill = value)) +
geom_tile(color = "black") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", na.value = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = NULL) +
scale_x_discrete(drop = FALSE, position = "top") +
scale_y_discrete(drop = FALSE, limits = rev, position = "right") +
geom_text(aes(var1, var2, label = value), color = "black", size = 4) +
labs(x = NULL, y = NULL, title = "SECOM (Distance)") +
theme_minimal() +
theme(axis.text.x = element_text(vjust = 1, size = 12, hjust = 1),
axis.text.y = element_text(size = 12),
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
legend.position = c(0.7, 0.8),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5)) +
coord_fixed()
p_secom3
library(tidyverse)
data = read_csv("outputs/complex/complex_se_gl2.csv")
View(data)
df1 = data[1:10, ]
df2 = data[11:20]
df2 = data[11:20, ]
View(df2)
df1_add = data.frame(X1 = runif(90, min(df1$X1), max(df1$X1)),
X2 = runif(90, min(df1$X2), max(df1$X2)),
X3 = runif(90, min(df1$X3), max(df1$X3)),
X4 = runif(90, min(df1$X4), max(df1$X4)))
View(df1_add)
View(df1)
df2_add = data.frame(X1 = runif(90, min(df2$X1), max(df2$X1)),
X2 = runif(90, min(df2$X2), max(df2$X2)),
X3 = runif(90, min(df2$X3), max(df2$X3)),
X4 = runif(90, min(df2$X4), max(df2$X4)))
df = rbind(df1, df1_add, df2, df2_add)
View(df)
write_csv(df, "complex_se_gl2.csv")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE,
message = FALSE, comment = NA,
fig.width = 6.25, fig.height = 5)
library(tidyverse)
library(microbiome)
library(Matrix)
library(SpiecEasi)
library(ggpubr)
library(ggsci)
library(Matrix)
library(DT)
options(DT.options = list(
initComplete = JS("function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});","}")))
source("../programs/00_secom.R")
hard_thresh = function(R, th){
R_th = R
R_th[abs(R) <= th] = 0
return(R_th)
}
cor2cov = function(R, std) {
Sigma = outer(std, std) * R
return(Sigma)
}
p_filter = function(mat, mat_p, max_p){
ind_p = mat_p
ind_p[mat_p > max_p] = 0
ind_p[mat_p <= max_p] = 1
mat_filter = mat * ind_p
return(mat_filter)
}
complex_data_generation = function(n, d, d1, abn_mean1, abn_prob1,
abn_mean2, abn_prob2, dispersion, seed) {
set.seed(seed)
#=============================Correlated pairs================================
mu1 = sample(abn_mean1, d, replace = TRUE, prob = abn_prob1)
mu2 = sample(abn_mean2, d, replace = TRUE, prob = abn_prob2)
# Absolute abundances
A1_1 = matrix(NA, ncol = n, nrow = d1)
for (i in seq_len(d1)) {
A1_1[i, ] = rnbinom(n = n, size = 1/dispersion, mu = mu1[i])
}
A2_1 = matrix(NA, ncol = n, nrow = d1)
for (i in seq_len(d1)) {
A2_1[i, ] = poly(x = A1_1[i, ], degree = 1, raw = FALSE)
A2_1[i, ] = round(mu2[i] * A2_1[i, ]) + mu2[i]
}
R0 = matrix(0, nrow = d, ncol = d)
R0_sub = diag(1, nrow = d1, ncol = d1)
for (i in seq_len(d1)) {
x1 = log(A1_1[i, ])
x2 = log(A2_1[i, ])
x1[is.infinite(x1)] = NA
x2[is.infinite(x2)] = NA
R0_sub[i, i] = cor(x1, x2, use = "pairwise.complete.obs")
}
R0[seq_len(d1), seq_len(d1)] = R0_sub
#==================================Data 1=====================================
A1 = matrix(NA, ncol = n, nrow = d)
for (i in seq(d1 + 1, d)) {
A1[i, ] = rnbinom(n = n, size = 1/dispersion, mu = mu1[i])
}
A1[seq_len(d1), ] = A1_1
# Sequencing efficiency
C1 = rbeta(n = d, shape1 = 5, shape2 = 5)
# Microbial loads in the ecosystem
A1_prim = A1 * C1
A1_dot = colSums(A1_prim)
# Relative abundances in the ecosystem
R1 = A1_prim/t(replicate(d, A1_dot))
# Sampling fractions
S1 = rbeta(n = n, shape1 = 2, shape2 = 10)
# Library sizes
O1_dot = round(S1 * A1_dot)
# Observed abundances
O1 = matrix(NA, nrow = d, ncol = n)
for (i in seq(n)) {
O1[, i] = rmultinom(1, size = O1_dot[i], prob = R1[, i])
}
#==================================Data 2=====================================
A2 = matrix(NA, ncol = n, nrow = d)
for (i in seq(d1 + 1, d)) {
A2[i, ] = rnbinom(n = n, size = 1/dispersion, mu = mu2[i])
}
A2[seq_len(d1), ] = A2_1
# Sequencing efficiency
C2 = rbeta(n = d, shape1 = 5, shape2 = 5)
# Microbial loads in the ecosystem
A2_prim = A2 * C2
A2_dot = colSums(A2_prim)
# Relative abundances in the ecosystem
R2 = A2_prim/t(replicate(d, A2_dot))
# Sampling fractions
S2 = rbeta(n = n, shape1 = 2, shape2 = 10)
# Library sizes
O2_dot = round(S2 * A2_dot)
# Observed abundances
O2 = matrix(NA, nrow = d, ncol = n)
for (i in seq(n)) {
O2[, i] = rmultinom(1, size = O2_dot[i], prob = R2[, i])
}
res = list(O1 = O1, O2 = O2, R0 = R0)
return(res)
}
n_d = c("50_100", "100_200")
d1 = 50
abn_mean1 = c(2000, 10000, 40000, 100000)
abn_prob1 = c(0.1, 0.4, 0.4, 0.1)
abn_mean2 = c(2000, 10000, 40000, 100000)
abn_prob2 = c(0.1, 0.4, 0.4, 0.1)
dispersion = c(0.5, 2)
iter_num = 100
seed = seq_len(iter_num)
simparams = data.frame(expand.grid(n_d, dispersion, seed)) %>%
separate(col = Var1, into = c("n", "d"), sep = "_") %>%
mutate(n = as.numeric(n),
d = as.numeric(d))
colnames(simparams) = c("n", "d", "dispersion", "seed")
simparams = simparams %>%
arrange(n, d, dispersion, seed)
simparams_list = apply(simparams, 1, paste0, collapse = "_")
complex_secom = read_csv("../outputs/complex/complex_secom.csv")
complex_secom1 = complex_secom[, 1:4]
complex_secom2 = complex_secom[, 5:8]
complex_secom3 = complex_secom[, 9:12]
complex_prop = read_csv("../outputs/complex/complex_prop.csv")
complex_sparcc = read_csv("../outputs/complex/complex_sparcc.csv")
complex_sample = read_csv("../outputs/complex/complex_sample.csv")
complex_se1 = read_csv("../outputs/complex/complex_se_mb.csv")
complex_se2 = read_csv("../outputs/complex/complex_se_gl.csv")
col_lab = c("rel_F", "rel_S", "tpr", "fpr")
colnames(complex_secom1) = col_lab
colnames(complex_secom2) = col_lab
colnames(complex_secom3) = col_lab
colnames(complex_prop) = col_lab
colnames(complex_sparcc) = col_lab
colnames(complex_se1) = col_lab
colnames(complex_se2) = col_lab
colnames(complex_sample) = col_lab
simpattern = distinct(simparams, n, d, dispersion) %>%
unite("setting", n:dispersion, sep = ", ")
complex_secom1 = complex_secom1 %>%
mutate(method = "SECOM (Pearson1)",
setting = rep(simpattern$setting, each = iter_num))
complex_secom2 = complex_secom2 %>%
mutate(method = "SECOM (Pearson2)",
setting = rep(simpattern$setting, each = iter_num))
complex_secom3 = complex_secom3 %>%
mutate(method = "SECOM (Distance)",
setting = rep(simpattern$setting, each = iter_num))
complex_prop = complex_prop %>%
mutate(method = "Proportionality",
setting = rep(simpattern$setting, each = iter_num))
complex_sparcc = complex_sparcc %>%
mutate(method = "SparCC",
setting = rep(simpattern$setting, each = iter_num))
complex_se1 = complex_se1 %>%
mutate(method = "SPIEC-EASI (MB)",
setting = rep(simpattern$setting, each = iter_num))
complex_se2 = complex_se2 %>%
mutate(method = "SPIEC-EASI (GL)",
setting = rep(simpattern$setting, each = iter_num))
complex_sample = complex_sample %>%
mutate(method = "Pearson",
setting = rep(simpattern$setting, each = iter_num))
df_complex = rbind(complex_secom1, complex_secom2, complex_secom3, complex_prop,
complex_sparcc, complex_se1, complex_se2)
# Relative norm loss
df_complex_fig1 = df_complex %>%
dplyr::select(rel_F, rel_S, method, setting) %>%
pivot_longer(cols = rel_F:rel_S, names_to = "measure", values_to = "value") %>%
group_by(method, setting, measure) %>%
summarise(measure_mean = mean(value),
measure_sd = sd(value))
df_complex_fig1$method = factor(df_complex_fig1$method,
levels = c("SECOM (Pearson1)", "SECOM (Pearson2)",
"SECOM (Distance)", "Proportionality", "SparCC",
"SPIEC-EASI (MB)", "SPIEC-EASI (GL)"))
df_complex_fig1$setting = factor(df_complex_fig1$setting,
levels = c("50, 100, 0.5", "50, 100, 2",
"100, 200, 0.5", "100, 200, 2"))
p_complex1 = df_complex_fig1 %>%
ggplot(aes(x = setting, y = measure_mean, fill = method)) +
geom_bar(position = "dodge", stat = "identity", color = "black") +
geom_errorbar(aes(ymin = measure_mean - measure_sd, ymax = measure_mean + measure_sd),
width = .2, position = position_dodge(.9)) +
scale_fill_nejm(name = NULL) +
scale_x_discrete(labels = c("50, 100, 0.5" = "(n = 50, d = 100, \u03B1 = 0.5)",
"50, 100, 2" = "(n = 50, d = 100, \u03B1 = 2)",
"100, 200, 0.5" = "(n = 100, d = 200, \u03B1 = 0.5)",
"100, 200, 2" = "(n = 100, d = 200, \u03B1 = 2)")) +
facet_grid(rows = vars(measure), scales = "free", switch = "y",
labeller = labeller(measure = c(rel_F = "Frobenius", rel_S = "Spectral"))) +
labs(title = "Relative Norm Loss", x = NULL, y = NULL) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
strip.background = element_rect(fill = "white"))
# TPR/FPR
df_complex_fig2 = df_complex %>%
dplyr::select(tpr, fpr, method, setting) %>%
pivot_longer(cols = tpr:fpr, names_to = "measure", values_to = "value") %>%
group_by(method, setting, measure) %>%
summarise(measure_mean = mean(value),
measure_sd = sd(value))
df_complex_fig2$method = factor(df_complex_fig2$method,
levels = c("SECOM (Pearson1)", "SECOM (Pearson2)",
"SECOM (Distance)", "Proportionality", "SparCC",
"SPIEC-EASI (MB)", "SPIEC-EASI (GL)"))
df_complex_fig2$setting = factor(df_complex_fig2$setting,
levels = c("50, 100, 0.5", "50, 100, 2",
"100, 200, 0.5", "100, 200, 2"))
p_complex2 = df_complex_fig2 %>%
ggplot(aes(x = setting, y = measure_mean, fill = method)) +
geom_bar(position = "dodge", stat = "identity", color = "black") +
geom_errorbar(aes(ymin = measure_mean - measure_sd, ymax = measure_mean + measure_sd),
width = .2, position = position_dodge(.9)) +
scale_fill_nejm(name = NULL) +
scale_x_discrete(labels = c("50, 100, 0.5" = "(n = 50, d = 100, \u03B1 = 0.5)",
"50, 100, 2" = "(n = 50, d = 100, \u03B1 = 2)",
"100, 200, 0.5" = "(n = 100, d = 200, \u03B1 = 0.5)",
"100, 200, 2" = "(n = 100, d = 200, \u03B1 = 2)")) +
facet_grid(rows = vars(measure), scales = "free", switch = "y",
labeller = labeller(measure = c(tpr = "TPR", fpr = "FPR"))) +
labs(title = "FPR/TPR", x = NULL, y = NULL) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
strip.background = element_rect(fill = "white"))
p_complex = ggarrange(p_complex1, p_complex2, ncol = 2, nrow = 1,
labels = c("a", "b"), common.legend = TRUE, legend = "bottom")
print(p_complex)
ggsave(plot = p_complex, "../images/main/sim_complex.pdf", height = 8, width = 15)
ggsave(plot = p_complex, "../images/main/sim_complex.jpeg", height = 8, width = 15, dpi = 300)
View(complex_se2)
View(df_complex_fig2)
df_complex = rbind(complex_secom1, complex_secom2, complex_secom3, complex_prop,
complex_sparcc, complex_se1, complex_se2, complex_sample)
# Relative norm loss
df_complex_fig1 = df_complex %>%
dplyr::select(rel_F, rel_S, method, setting) %>%
pivot_longer(cols = rel_F:rel_S, names_to = "measure", values_to = "value") %>%
group_by(method, setting, measure) %>%
summarise(measure_mean = mean(value),
measure_sd = sd(value))
df_complex_fig1$method = factor(df_complex_fig1$method,
levels = c("SECOM (Pearson1)", "SECOM (Pearson2)",
"SECOM (Distance)", "Proportionality", "SparCC",
"SPIEC-EASI (MB)", "SPIEC-EASI (GL)", "Pearson"))
df_complex_fig1$setting = factor(df_complex_fig1$setting,
levels = c("50, 100, 0.5", "50, 100, 2",
"100, 200, 0.5", "100, 200, 2"))
p_complex1 = df_complex_fig1 %>%
ggplot(aes(x = setting, y = measure_mean, fill = method)) +
geom_bar(position = "dodge", stat = "identity", color = "black") +
geom_errorbar(aes(ymin = measure_mean - measure_sd, ymax = measure_mean + measure_sd),
width = .2, position = position_dodge(.9)) +
scale_fill_nejm(name = NULL) +
scale_x_discrete(labels = c("50, 100, 0.5" = "(n = 50, d = 100, \u03B1 = 0.5)",
"50, 100, 2" = "(n = 50, d = 100, \u03B1 = 2)",
"100, 200, 0.5" = "(n = 100, d = 200, \u03B1 = 0.5)",
"100, 200, 2" = "(n = 100, d = 200, \u03B1 = 2)")) +
facet_grid(rows = vars(measure), scales = "free", switch = "y",
labeller = labeller(measure = c(rel_F = "Frobenius", rel_S = "Spectral"))) +
labs(title = "Relative Norm Loss", x = NULL, y = NULL) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
strip.background = element_rect(fill = "white"))
# TPR/FPR
df_complex_fig2 = df_complex %>%
dplyr::select(tpr, fpr, method, setting) %>%
pivot_longer(cols = tpr:fpr, names_to = "measure", values_to = "value") %>%
group_by(method, setting, measure) %>%
summarise(measure_mean = mean(value),
measure_sd = sd(value))
df_complex_fig2$method = factor(df_complex_fig2$method,
levels = c("SECOM (Pearson1)", "SECOM (Pearson2)",
"SECOM (Distance)", "Proportionality", "SparCC",
"SPIEC-EASI (MB)", "SPIEC-EASI (GL)", "Pearson"))
df_complex_fig2$setting = factor(df_complex_fig2$setting,
levels = c("50, 100, 0.5", "50, 100, 2",
"100, 200, 0.5", "100, 200, 2"))
p_complex2 = df_complex_fig2 %>%
ggplot(aes(x = setting, y = measure_mean, fill = method)) +
geom_bar(position = "dodge", stat = "identity", color = "black") +
geom_errorbar(aes(ymin = measure_mean - measure_sd, ymax = measure_mean + measure_sd),
width = .2, position = position_dodge(.9)) +
scale_fill_nejm(name = NULL) +
scale_x_discrete(labels = c("50, 100, 0.5" = "(n = 50, d = 100, \u03B1 = 0.5)",
"50, 100, 2" = "(n = 50, d = 100, \u03B1 = 2)",
"100, 200, 0.5" = "(n = 100, d = 200, \u03B1 = 0.5)",
"100, 200, 2" = "(n = 100, d = 200, \u03B1 = 2)")) +
facet_grid(rows = vars(measure), scales = "free", switch = "y",
labeller = labeller(measure = c(tpr = "TPR", fpr = "FPR"))) +
labs(title = "FPR/TPR", x = NULL, y = NULL) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
strip.background = element_rect(fill = "white"))
p_complex = ggarrange(p_complex1, p_complex2, ncol = 2, nrow = 1,
labels = c("a", "b"), common.legend = TRUE, legend = "bottom")
print(p_complex)
ggsave(plot = p_complex, "../images/supp/supp_sim_complex.pdf", height = 8, width = 15)
ggsave(plot = p_complex, "../images/supp/supp_sim_complex.jpeg", height = 8, width = 15, dpi = 300)
