labs(x = NULL, y = NULL, title = "Forehead") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1,
face = "italic", color = "#1B9E77"),
axis.text.y = element_text(size = 12, face = "italic", color = "#1B9E77"),
strip.text.x = element_text(size = 14),
strip.text.y = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 15),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
legend.position = "none") +
coord_fixed()
pseqs = list(c(palm_otu_data, palm_genus_data2))
pseudo = 0; zero_cut = 0.5; corr_cut = 0.5; lib_cut = 1000
wins_quant = c(0, 1); method = "pearson"; soft = FALSE; thresh_len = 20
n_cv = 10; seed = 123; thresh_hard = 0.3; max_p_linear = 0.001; n_cl = 5
res_linear2 = secom_linear(pseqs, pseudo, zero_cut, corr_cut, lib_cut,
wins_quant, method, soft, thresh_len, n_cv,
seed, thresh_hard, max_p_linear, n_cl)
R = 1000; seed = 123; max_p_dist = 0.001
res_dist2 = secom_dist(pseqs, pseudo, zero_cut, corr_cut, lib_cut,
wins_quant, R, seed, max_p_dist, n_cl)
# Data organization
# Linear relationships
# corr_linear = res_linear2$corr_th
corr_linear = res_linear2$corr_fl
cooccur_linear = res_linear2$mat_cooccur
# Filter by co-occurrence
overlap = 10
corr_linear[cooccur_linear < overlap] = 0
df_linear2 = data.frame(get_upper_tri(corr_linear)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
filter(!is.na(value)) %>%
mutate(var2 = gsub("\\...", " - ", var2),
value = round(value, 2),
metric = "Pearson")
# Distance relationships
corr_dist = res_dist2$dcorr_fl
cooccur_dist = res_dist2$mat_cooccur
# Filter by co-occurrence
overlap = 10
corr_dist[cooccur_dist < overlap] = 0
df_dist2 = data.frame(get_upper_tri(corr_dist)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
filter(!is.na(value)) %>%
mutate(var2 = gsub("\\...", " - ", var2),
value = round(value, 2),
metric = "Distance")
# Merge datasets
df_secom2 = df_linear2 %>%
bind_rows(
df_dist2
)
genus_level = sort(union(df_secom2$var1, df_secom2$var2))
df_secom2$var1 = factor(df_secom2$var1, levels = genus_level)
df_secom2$var2 = factor(df_secom2$var2, levels = genus_level)
df_secom2$metric = factor(df_secom2$metric, levels = c("Pearson", "Distance"))
heat_secom2 = df_secom2 %>%
ggplot(aes(var2, var1, fill = value)) +
geom_tile(color = "black") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", na.value = "grey",
midpoint = 0, limit = c(-1,1), space = "Lab",
name = NULL) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
facet_grid(.~metric) +
geom_text(aes(var2, var1, label = value), color = "black", size = 4) +
labs(x = NULL, y = NULL, title = "Palm") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1,
face = "italic", color = "#D95F02"),
axis.text.y = element_text(size = 12, face = "italic", color = "#D95F02"),
strip.text.x = element_text(size = 14),
strip.text.y = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 15),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
legend.position = "none") +
coord_fixed()
p_secom = ggarrange(heat_secom,
ggarrange(heat_secom1, heat_secom2, ncol = 2, labels = c("b", "c")),
nrow = 2, labels = "a")
p_secom
pkg_list = c("doParallel", "doRNG", "Hmisc", "DescTools", "readr", "energy", "tidyverse")
pkg_new = pkg_list[!(pkg_list %in% installed.packages()[, "Package"])]
if(length(pkg_new)) install.packages(pkg_new)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!"microbiome" %in% installed.packages()[, "Package"])
BiocManager::install("microbiome")
library(doParallel)
library(doRNG)
library(DescTools)
library(Hmisc)
library(energy)
library(readr)
library(tidyverse)
library(microbiome)
source("programs/00_secom.R")
cor2cov = function(R, std) {
Sigma = outer(std, std) * R
return(Sigma)
}
linear_data_generation = function(n, d, d1, corr_mu, corr_prob,
uncorr_mu, uncorr_prob, dispersion, seed) {
set.seed(seed)
d2 = d - d1
mu = c(sample(corr_mu, d1, replace = TRUE, prob = corr_prob), # Correlated taxa
sample(uncorr_mu, d2, replace = TRUE, prob = uncorr_prob)) # Uncorrelated taxa
# Absolute abundances
A = matrix(NA, ncol = n, nrow = d)
for (i in seq_len(d)) {
A[i, ] = rnbinom(n = n, size = 1/dispersion, mu = mu[i])
}
for (i in seq(2, d1, 2)) {
A[i, ] = poly(x = A[i - 1, ], degree = 1, raw = FALSE)
A[i, ] = round(mu[i] * A[i, ]) + mu[i]
}
R0 = matrix(0, ncol = d, nrow = d)
lmat = replicate(d1/2,
matrix(1, ncol = 2, nrow = 2),
simplify = FALSE)
R0_sub = as.matrix(Matrix::bdiag(lmat))
R0_sub[R0_sub == 1] = cor(t(log(A[seq_len(d1), ] + 1)))[R0_sub == 1]
R0[seq_len(d1), seq_len(d1)] = R0_sub
# Sequencing efficiency
C = rbeta(n = d, shape1 = 5, shape2 = 5)
# Microbial loads in the ecosystem
A_prim = A * C
A_dot = colSums(A_prim)
# Relative abundances in the ecosystem
R = A_prim/t(replicate(d, A_dot))
# Sampling fractions
S = rbeta(n = n, shape1 = 2, shape2 = 10)
# Library sizes
O_dot = round(S * A_dot)
# Observed abundances
O = matrix(NA, nrow = d, ncol = n)
for (i in seq(n)) {
O[, i] = rmultinom(1, size = O_dot[i], prob = R[, i])
}
res = list(O = O, R0 = R0)
return(res)
}
n_d = c("50_100")
d1 = 50
corr_mu = c(2000, 10000, 40000, 100000)
corr_prob = c(0.1, 0.4, 0.4, 0.1)
uncorr_mu = c(2000, 10000, 40000, 100000)
uncorr_prob = c(0.1, 0.4, 0.4, 0.1)
dispersion = 0.5
iter_num = 100
seed = seq_len(iter_num)
simparams = data.frame(expand.grid(n_d, dispersion, seed)) %>%
separate(col = Var1, into = c("n", "d"), sep = "_") %>%
mutate(n = as.numeric(n),
d = as.numeric(d))
colnames(simparams) = c("n", "d", "dispersion", "seed")
simparams = simparams %>%
arrange(n, d, dispersion, seed)
simparams_list = apply(simparams, 1, paste0, collapse = "_")
i = simparams_list[[1]]
params = strsplit(i, "_")[[1]]
n = as.numeric(params[1])
d = as.numeric(params[2])
dispersion = as.numeric(params[3])
seed = as.numeric(params[4])
sim_data = linear_data_generation(n, d, d1, corr_mu, corr_prob,
uncorr_mu, uncorr_prob, dispersion, seed)
O = sim_data$O
R0 = sim_data$R0
taxa_id = paste0("T", seq_len(d))
sample_id = paste0("S", seq_len(n))
meta_data = data.frame(sample_id = sample_id)
dimnames(O) = list(taxa_id, sample_id)
OTU = otu_table(O, taxa_are_rows = TRUE)
META = sample_data(meta_data)
sample_names(META) = meta_data$sample_id
otu_data = phyloseq(OTU, META)
pseqs = list(c(otu_data, otu_data))
pseudo = 0; zero_cut = 0.5; corr_cut = 0.5; lib_cut = 1000
wins_quant = c(0, 1); method = "pearson"; soft = FALSE; thresh_len = 20
n_cv = 10; seed = 123; thresh_hard = 0.3; max_p = 0.001; n_cl = 1
res_linear = secom_linear(pseqs, pseudo, zero_cut, corr_cut, lib_cut,
wins_quant, method, soft, thresh_len, n_cv,
seed, thresh_hard, max_p, n_cl)
R = 1000; max_p = 0.001
res_dist = secom_dist(pseqs, pseudo, zero_cut, corr_cut, lib_cut,
wins_quant, R, seed, max_p, n_cl)
taxa_keep = rownames(res_linear$corr)
pos_idx = match(taxa_keep, taxa_id)
R_hat_secom1 = matrix(0, ncol = d, nrow = d)
R_hat_secom1[pos_idx, pos_idx] = res_linear$corr_fl
R_hat_secom2 = matrix(0, ncol = d, nrow = d)
R_hat_secom2[pos_idx, pos_idx] = res_dist$dcorr_fl
View(R_hat_secom2)
R11 = (R_hat_secom1 != 0) * (R_hat_secom2 != 0)
View(R11)
sum(R11)
true_ind = (R0[lower.tri(R0)] != 0)
secom_ind1 = (R_hat_secom1[lower.tri(R_hat_secom1)] != 0)
secom_ind2 = (R_hat_secom2[lower.tri(R_hat_secom2)] != 0)
# Compare two measures
count11 = sum(secom_ind1 == 1 & secom_ind2 == 1)
R10 = (R_hat_secom1 != 0) * (R_hat_secom2 == 0)
R01 = (R_hat_secom1 == 0) * (R_hat_secom2 != 0)
R00 = (R_hat_secom1 == 0) * (R_hat_secom2 == 0)
tp = (R0[lower.tri(R0)] != 0)
R11 = R11[lower.tri(R11)]
R10 = R10[lower.tri(R10)]
R01 = R01[lower.tri(R01)]
R00 = R00[lower.tri(R00)]
tf = (R0[lower.tri(R0)] == 0)
# TPR
tpr11 = sum(R11 * tp)/sum(tp)
# TPR
tp11 = sum(R11 * tp)
tp10 = sum(R10 * tp)
tp01 = sum(R01 * tp)
tn = (R0[lower.tri(R0)] == 0)
# FPR
fp11 = sum(R11 * tn)
fp10 = sum(R10 * tn)
fp01 = sum(R01 * tn)
# TN/FN
tn00 = sum(R00 * tn)
fn00 = sum(R00 * tp)
tp = (R0[lower.tri(R0)] != 0)
tn = (R0[lower.tri(R0)] == 0)
# TP
tp11 = sum(R11 * tp)
tp10 = sum(R10 * tp)
tp01 = sum(R01 * tp)
# FP
fp11 = sum(R11 * tn)
fp10 = sum(R10 * tn)
fp01 = sum(R01 * tn)
# TN/FN
tn00 = sum(R00 * tn)
fn00 = sum(R00 * tp)
# Compare two measures
count11 = sum(R11)
count10 = sum(R10)
count01 = sum(R01)
count00 = sum(R00)
c(count11, count10, count01, count00,
tp11, tp10, tp01, fp11, fp10, fp01, tn00, tn01)
c(count11, count10, count01, count00,
tp11, tp10, tp01, fp11, fp10, fp01, tn00, fn00)
library(doParallel)
library(doRNG)
library(DescTools)
library(Hmisc)
library(energy)
library(readr)
library(tidyverse)
library(microbiome)
source("programs/00_secom.R")
cor2cov = function(R, std) {
Sigma = outer(std, std) * R
return(Sigma)
}
nonlinear_data_generation = function(n, d, d1, abn_mean, abn_prob,
dispersion, seed) {
set.seed(seed)
d2 = d - d1
# ==========================Correlated pairs==================================
# Log-Normal distribution to mimic NB distribution
template_var = sapply(abn_mean, function(x)
log((x + dispersion * x^2)/x^2 + 1))
template_mean = log(abn_mean) - template_var/2
mu = sample(template_mean, d1, replace = TRUE, prob = abn_prob)
std = rep(NA, d1)
for (i in seq_along(template_mean)) {
std[mu == template_mean[i]] = sqrt(template_var[i])
}
Sigma = cor2cov(R = diag(1, nrow = d1), std = std)
# Absolute abundance in log scale
a = t(MASS::mvrnorm(n = n, mu = mu, Sigma = Sigma))
for (i in seq(2, d1, 2)) {
a[i, ] = poly(x = a[i - 1, ], degree = 2, raw = FALSE)[, 2]
a[i, ] = mu[i] * a[i, ] + mu[i]
}
A1 = round(exp(a))
# ========================Uncorrelated pairs==================================
mu = sample(abn_mean, d2, replace = TRUE, prob = abn_prob)
# Absolute abundances
A2 = matrix(NA, ncol = n, nrow = d2)
for (i in seq_len(d2)) {
A2[i, ] = rnbinom(n = n, size = 1/dispersion, mu = mu[i])
}
A = rbind(A1, A2)
# Sequencing efficiency
C = C = rbeta(n = d, shape1 = 5, shape2 = 5)
# Microbial loads in the ecosystem
A_prim = A * C
A_dot = colSums(A_prim)
# Relative abundances in the ecosystem
R = A_prim/t(replicate(d, A_dot))
# Sampling fractions
S = rbeta(n = n, shape1 = 2, shape2 = 10)
# Library sizes
O_dot = round(S * A_dot)
# Observed abundances
O = matrix(NA, nrow = d, ncol = n)
for (i in seq(n)) {
O[, i] = rmultinom(1, size = O_dot[i], prob = R[, i])
}
R0 = matrix(0, ncol = d, nrow = d)
lmat = replicate(d1/2,
matrix(1, ncol = 2, nrow = 2),
simplify = FALSE)
R0_sub = as.matrix(Matrix::bdiag(lmat))
R0[seq_len(d1), seq_len(d1)] = R0_sub
res = list(O = O, R0 = R0)
return(res)
}
n_d = c("50_100", "100_200")
d1 = 50
abn_mean = c(2000, 10000, 40000, 100000)
abn_prob = c(0.1, 0.4, 0.4, 0.1)
dispersion = c(0.5, 2)
iter_num = 100
seed = seq_len(iter_num)
simparams = data.frame(expand.grid(n_d, dispersion, seed)) %>%
separate(col = Var1, into = c("n", "d"), sep = "_") %>%
mutate(n = as.numeric(n),
d = as.numeric(d))
colnames(simparams) = c("n", "d", "dispersion", "seed")
simparams = simparams %>%
arrange(n, d, dispersion, seed)
simparams_list = apply(simparams, 1, paste0, collapse = "_")
n_d = c("50_100")
d1 = 50
abn_mean = c(2000, 10000, 40000, 100000)
abn_prob = c(0.1, 0.4, 0.4, 0.1)
dispersion = 0.5
iter_num = 100
seed = seq_len(iter_num)
simparams = data.frame(expand.grid(n_d, dispersion, seed)) %>%
separate(col = Var1, into = c("n", "d"), sep = "_") %>%
mutate(n = as.numeric(n),
d = as.numeric(d))
colnames(simparams) = c("n", "d", "dispersion", "seed")
simparams = simparams %>%
arrange(n, d, dispersion, seed)
simparams_list = apply(simparams, 1, paste0, collapse = "_")
i = simparams_list[[1]]
params = strsplit(i, "_")[[1]]
n = as.numeric(params[1])
d = as.numeric(params[2])
dispersion = as.numeric(params[3])
seed = as.numeric(params[4])
sim_data = nonlinear_data_generation(n, d, d1, abn_mean, abn_prob, dispersion, seed)
O = sim_data$O
R0 = sim_data$R0
taxa_id = paste0("T", seq_len(d))
sample_id = paste0("S", seq_len(n))
meta_data = data.frame(sample_id = sample_id)
dimnames(O) = list(taxa_id, sample_id)
OTU = otu_table(O, taxa_are_rows = TRUE)
META = sample_data(meta_data)
sample_names(META) = meta_data$sample_id
otu_data = phyloseq(OTU, META)
pseqs = list(c(otu_data, otu_data))
pseudo = 0; zero_cut = 0.5; corr_cut = 0.5; lib_cut = 1000
wins_quant = c(0, 1); method = "pearson"; soft = FALSE; thresh_len = 20
n_cv = 10; seed = 123; thresh_hard = 0.3; max_p = 0.001; n_cl = 1
res_linear = secom_linear(pseqs, pseudo, zero_cut, corr_cut, lib_cut,
wins_quant, method, soft, thresh_len, n_cv,
seed, thresh_hard, max_p, n_cl)
R = 1000; max_p = 0.001
res_dist = secom_dist(pseqs, pseudo, zero_cut, corr_cut, lib_cut,
wins_quant, R, seed, max_p, n_cl)
taxa_keep = rownames(res_linear$corr)
pos_idx = match(taxa_keep, taxa_id)
R_hat_secom1 = matrix(0, ncol = d, nrow = d)
R_hat_secom1[pos_idx, pos_idx] = res_linear$corr_fl
R_hat_secom2 = matrix(0, ncol = d, nrow = d)
R_hat_secom2[pos_idx, pos_idx] = res_dist$dcorr_fl
R11 = (R_hat_secom1 != 0) * (R_hat_secom2 != 0)
R10 = (R_hat_secom1 != 0) * (R_hat_secom2 == 0)
R01 = (R_hat_secom1 == 0) * (R_hat_secom2 != 0)
R00 = (R_hat_secom1 == 0) * (R_hat_secom2 == 0)
R11 = R11[lower.tri(R11)]
R10 = R10[lower.tri(R10)]
R01 = R01[lower.tri(R01)]
R00 = R00[lower.tri(R00)]
tp = (R0[lower.tri(R0)] != 0)
tn = (R0[lower.tri(R0)] == 0)
# TP
tp11 = sum(R11 * tp)
tp10 = sum(R10 * tp)
tp01 = sum(R01 * tp)
# FP
fp11 = sum(R11 * tn)
fp10 = sum(R10 * tn)
fp01 = sum(R01 * tn)
# TN/FN
tn00 = sum(R00 * tn)
fn00 = sum(R00 * tp)
# Compare two measures
count11 = sum(R11)
count10 = sum(R10)
count01 = sum(R01)
count00 = sum(R00)
c(count11, count10, count01, count00,
tp11, tp10, tp01, fp11, fp10, fp01, tn00, fn00)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE,
message = FALSE, comment = NA,
fig.width = 6.25, fig.height = 5)
library(tidyverse)
library(microbiome)
library(Matrix)
library(SpiecEasi)
library(ggpubr)
library(ggsci)
library(Matrix)
library(DT)
options(DT.options = list(
initComplete = JS("function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});","}")))
source("../programs/00_secom.R")
hard_thresh = function(R, th){
R_th = R
R_th[abs(R) <= th] = 0
return(R_th)
}
cor2cov = function(R, std) {
Sigma = outer(std, std) * R
return(Sigma)
}
p_filter = function(mat, mat_p, max_p){
ind_p = mat_p
ind_p[mat_p > max_p] = 0
ind_p[mat_p <= max_p] = 1
mat_filter = mat * ind_p
return(mat_filter)
}
n_d = c("50_100")
d1 = 50
corr_mu = c(2000, 10000, 40000, 100000)
corr_prob = c(0.1, 0.4, 0.4, 0.1)
uncorr_mu = c(2000, 10000, 40000, 100000)
uncorr_prob = c(0.1, 0.4, 0.4, 0.1)
dispersion = 0.5
iter_num = 100
seed = seq_len(iter_num)
simparams = data.frame(expand.grid(n_d, dispersion, seed)) %>%
separate(col = Var1, into = c("n", "d"), sep = "_") %>%
mutate(n = as.numeric(n),
d = as.numeric(d))
colnames(simparams) = c("n", "d", "dispersion", "seed")
simparams = simparams %>%
arrange(n, d, dispersion, seed)
simparams_list = apply(simparams, 1, paste0, collapse = "_")
compare_linear = read_csv("../outputs/concordance/linear_conc.csv")
View(compare_linear)
compare_linear = colSums(compare_linear)
compare_linear = read_csv("../outputs/concordance/linear_conc.csv")
compare_linear = colMeans(compare_linear)
compare_linear
df_compare_linear = read_csv("../outputs/concordance/linear_conc.csv")
compare_linear = colMeans(df_compare_linear)
View(df_compare_linear)
compare_linear = data.frame(`(1, 1)` = paste0(compare_linear[1], " (TP = ", compare_linear[5],
" (FP = ", compare_linear[8]),
`(1, 0)` = paste0(compare_linear[2], " (TP = ", compare_linear[6],
" (FP = ", compare_linear[9]),
`(0, 1)` = paste0(compare_linear[3], " (TP = ", compare_linear[7],
" (FP = ", compare_linear[10]),
`(0, 0)` = paste0(compare_linear[4], " (TN = ", compare_linear[11],
" (FN = ", compare_linear[12]))
View(compare_linear)
compare_linear = colMeans(df_compare_linear)
compare_linear = data.frame(x1 = paste0(compare_linear[1], " (TP = ", compare_linear[5],
", (FP = ", compare_linear[8], ")"),
x2 = paste0(compare_linear[2], " (TP = ", compare_linear[6],
", (FP = ", compare_linear[9], ")"),
x3 = paste0(compare_linear[3], " (TP = ", compare_linear[7],
", (FP = ", compare_linear[10], ")"),
x4 = paste0(compare_linear[4], " (TN = ", compare_linear[11],
", (FN = ", compare_linear[12], ")"))
colnames(compare_linear) = c("(1, 1)", "(1, 0)", "(0, 1)", "(0, 0)")
datatable(compare_linear)
compare_linear = colMeans(df_compare_linear)
compare_linear = data.frame(x1 = paste0(compare_linear[1], " (TP = ", compare_linear[5],
", FP = ", compare_linear[8], ")"),
x2 = paste0(compare_linear[2], " (TP = ", compare_linear[6],
", FP = ", compare_linear[9], ")"),
x3 = paste0(compare_linear[3], " (TP = ", compare_linear[7],
", FP = ", compare_linear[10], ")"),
x4 = paste0(compare_linear[4], " (TN = ", compare_linear[11],
", FN = ", compare_linear[12], ")"))
colnames(compare_linear) = c("(1, 1)", "(1, 0)", "(0, 1)", "(0, 0)")
datatable(compare_linear)
df_compare_nonlinear = read_csv("../outputs/concordance/nonlinear_conc.csv")
compare_nonlinear = colMeans(df_compare_nonlinear)
compare_nonlinear = data.frame(x1 = paste0(compare_nonlinear[1], " (TP = ", compare_nonlinear[5],
", FP = ", compare_nonlinear[8], ")"),
x2 = paste0(compare_nonlinear[2], " (TP = ", compare_nonlinear[6],
", FP = ", compare_nonlinear[9], ")"),
x3 = paste0(compare_nonlinear[3], " (TP = ", compare_nonlinear[7],
", FP = ", compare_nonlinear[10], ")"),
x4 = paste0(compare_nonlinear[4], " (TN = ", compare_nonlinear[11],
", FN = ", compare_nonlinear[12], ")"))
colnames(compare_nonlinear) = c("(1, 1)", "(1, 0)", "(0, 1)", "(0, 0)")
datatable(compare_nonlinear)
